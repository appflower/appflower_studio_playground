<?php
// auto-generated by sfPropelCrud
// date: 2007/07/04 20:44:54
?>
<?php

/**
 * afGuardUserProfile actions.
 *
 * @package    logForge
 * @subpackage sfGuardUserProfile
 * @author     Jimmi Andersen <ja@immune.dk>
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class afGuardUserProfileActions extends CustomActions
{
	
  public function executeEdit()
  {
  	
  	$this->sf_guard_user = $this->getUser()->getGuardUser();
    $this->forward404Unless($this->sf_guard_user);
    
    $this->sf_guard_user_profile = $this->getUser()->getProfile();
    $this->forward404Unless($this->sf_guard_user_profile);
    
    $this->sf_guard_user_profile->setPersonalBody(str_replace("\n","",$this->sf_guard_user_profile->getPersonalBody()));
    
    $this->id = $this->sf_guard_user_profile->getUserId();
    $this->tid = ($this->sf_guard_user_profile->getTimezonesId()) ? $this->sf_guard_user_profile->getTimezonesId() : "";
      	
    return XmlParser::layoutExt($this);
  }

  public function executeEditProfile()
  {
  	
  	$this->sf_guard_user = sfGuardUserPeer::retrieveByPk($this->getUser()->getGuardUser()->getId());
    $this->forward404Unless($this->sf_guard_user);
  	
    $this->sf_guard_user_profile = sfGuardUserProfilePeer::getProfile($this->sf_guard_user->getId());
    $this->forward404Unless($this->sf_guard_user_profile);

  }

  public function executeUpdate()
  { 
  	
  	// Validate the user account for existens
    $sf_guard_user_id = $this->getUser()->getGuardUser()->getId();
    
    if (!$sf_guard_user_id)
    {
      $sf_guard_user = new sfGuardUser();      
      $sf_guard_user_profile = new sfGuardUserProfile();
      $is_new=true;
    }
    else
    {
      $sf_guard_user = sfGuardUserPeer::retrieveByPk($sf_guard_user_id);
      $sf_guard_user_profile = $sf_guard_user->getProfile();
      $this->forward404Unless($sf_guard_user);
      $this->forward404Unless($sf_guard_user_profile);
      $is_new=false;
	}
	
	//audit log
	if(!$is_new)
	{
		$sf_guard_user_old=clone $sf_guard_user;
		$sf_guard_user_profile_old=clone $sf_guard_user_profile;
	}

	$sf_guard_user_profile->setWidgetHelpIsEnabled($this->getRequestParameter('edit[0][widget_help_is_enabled]'));
    $sf_guard_user_profile->setJobTitle($this->getRequestParameter('edit[0][job_title]'));
    $sf_guard_user_profile->setPhoneMobile($this->getRequestParameter('edit[0][phone_mobile]'));
    $sf_guard_user_profile->setPhoneOffice($this->getRequestParameter('edit[0][phone_office]'));
    $sf_guard_user_profile->setPersonalBody($this->getRequestParameter('edit[0][personal_body]'));
    
    $gmt = TimeZonesPeer::getGMT();
    
    try {
    	if(!is_object($gmt)) {
    		throw new Exception("Was unable to select GMT record from timezones!");
    	}
    }
	catch(Exception $e) {
		throw $e;
	}
	
	// Setting the time zone, defaults to GMT.
	if(!$this->getRequestParameter('edit[0][time_zones_id_value]')) {
		$sf_guard_user_profile->setTimeZonesId($gmt->getId());
	} else {
		$sf_guard_user_profile->setTimeZonesId($this->getRequestParameter('edit[0][time_zones_id_value]'));
	}
	
	//email notification settings
	
	$res = explode(',', $this->getRequestParameter('edit[0][ticket_resolutions]'));
  	$sf_guard_user_profile->setEnTicketResolutions(serialize($res));
  	$sf_guard_user_profile->setEnAssignedTo($this->getRequestParameter('edit[0][en_assigned_to]'));
  	$sf_guard_user_profile->setEnReporter($this->getRequestParameter('edit[0][en_reporter]'));
  	$sf_guard_user_profile->setEnTicketUpdated($this->getRequestParameter('edit[0][en_ticket_updated]'));
  	$sf_guard_user_profile->setEnDontSend($this->getRequestParameter('edit[0][en_dont_send]'));
  	$sf_guard_user_profile->setEnDailyProject($this->getRequestParameter('edit[0][en_daily_project]'));
  	$sf_guard_user_profile->setEnWeeklyProject($this->getRequestParameter('edit[0][en_weekly_project]'));
  	$sf_guard_user_profile->save();
   
    $sf_guard_user_profile->save();
    
    //audit log
    if($is_new)
    {
    	//myAuditLogger::logNewObject($sf_guard_user_profile);
    }
    else {
    	//myAuditLogger::logUpdateObject($sf_guard_user_profile_old,$sf_guard_user_profile);
    }

	// Change the password, if something is entered in the form.
	if( strlen(trim($this->getRequestParameter('edit[0][userpass]'))) > 0) {
		$sf_guard_user->setPassword($this->getRequestParameter('edit[0][userpass]'));
  	}

    $sf_guard_user->save();
    
    //audit log
    if($is_new)
    {
    	//myAuditLogger::logNewObject($sf_guard_user);
    }
    else {
    	//myAuditLogger::logUpdateObject($sf_guard_user_old,$sf_guard_user);
    }

    $result = array('success' => true, 'message' => 'Successfully saved your information! ');
	$result = json_encode($result);
	return $this->renderText($result);
    
  }
  
  public function executeWidget()
  {
  	$this->redirectUnless($this->hasRequestParameter('type')&&in_array($this->getRequestParameter('type'),array('enable','disable')),'/user/myprofile');
  	
  	$type=$this->getRequestParameter('type');
  	$profile=$this->getUser()->getProfile();
  	$referer=$this->getRequest()->getReferer();
  	$referer=($referer)?$referer:'/';  	
  	
  	switch ($type)
  	{
  		case "enable":
  			$profile->setWidgetHelpIsEnabled(true);
  			$profile->save();
  			break;
  		case "disable":
  			$profile->setWidgetHelpIsEnabled(false);
  			$profile->save();
  			break;
  	}
  	
  	$this->redirect($referer);
  }	
  
}
