<?php
// auto-generated by sfPropelCrud
// date: 2007/07/03 14:10:00
?>
<?php

/**
 * sfGuardGroup actions.
 *
 * @package    logForge
 * @subpackage sfGuardGroup
 * @author     Jimmi Andersen <ja@immune.dk>
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class sfGuardGroupActions extends CustomActions
{
	public function executeListActionsRemoveUserGroup(){
		//If no additional operations is to be performed use this block #################
		if($this->getRequest()->getMethod() == sfRequest::POST)
		{
			$post = $this->getRequest()->getParameterHolder()->getAll();			
			return $this->renderText(Util::listActionsRemove("sfGuardGroupPeer",$post,"/sfGuardGroup/list"));			
		}
		// ##############################################################################		
	}
	public function executeIndex()
	{
		return $this->forward('sfGuardGroup', 'list');
	}

	public function executeList()
	{
		return XmlParser::layoutExt($this);
	}

	public function executeEdit()
	{

		$this->id = $this->getRequestParameter("id",0);

		if($this->getRequest()->getMethod() === sfRequest::POST) {
			$this->id = $this->getRequestParameter("edit[0][id]");
				
			if (!$this->id)
			{
				$sf_guard_group = new sfGuardGroup();
				$is_new=true;
			}
			else
			{
				$sf_guard_group = sfGuardGroupPeer::retrieveByPk($this->id);
				$this->forward404Unless($sf_guard_group);
				$sf_guard_group->setId($this->id);

				$is_new=false;

			}

			//audit log
			if(!$is_new)
			{
				$sf_guard_group_old=clone $sf_guard_group;
			}
				
			$sf_guard_group->setName($this->getRequestParameter('edit[0][name]'));
			$sf_guard_group->setDescription($this->getRequestParameter('edit[0][description]'));

			$sf_guard_group->save();
			
			//audit log
   			if(isset($sf_guard_group_old))
   			{
        		myLogger::logUpdateObject($sf_guard_group_old, $sf_guard_group, '/sfGuardGroup/edit?id='.$sf_guard_group->getId(), $sf_guard_group->getName(), $this->getUser()->getGuardUser());
   			}else
   			{
        		myLogger::logNewObject($sf_guard_group,  '/sfGuardGroup/edit?id='.$sf_guard_group->getId(), $sf_guard_group->getName(), $this->getUser()->getGuardUser());
   			}

			// clear group data to save it again
			sfGuardGroupPermissionPeer::deletePermissionGroups($sf_guard_group->getId());

			// save groups
			$groups = explode(",",$this->getRequestParameter('edit[0][associated_sf_guard_group]'));

			if ($groups)
			{
				foreach ($groups as $id)
				{
					if($id) {
						$group = new sfGuardGroupPermission();
						$group->setPermissionId($id);
						$group->setGroupId($sf_guard_group->getId());
						$group->save();
					}
						
				}
			}
				
			$result['message']= 'The permission group has been '.(($this->id) ? 'modified' : 'created!');
			$result['success']= true;
			$result = json_encode($result);
			return $this->renderText($result);
				
		}

		return XmlParser::layoutExt($this);
	}


	public function executeDelete()
	{
		$sf_guard_group = sfGuardGroupPeer::retrieveByPk($this->getRequestParameter('id'));
		$this->forward404Unless($sf_guard_group);

		$sf_guard_group->delete();
		
		//audit log
    	myLogger::logDeleteObject($sf_guard_group, $sf_guard_group->getName(), $this->getUser()->getGuardUser());

		return $this->redirect("/sfGuardGroup/list");
	}
}
