<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xml="http://www.w3.org/XML/1998/namespace" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:i="http://www.appflower.com/schema/" 
xmlns="http://www.w3.org/1999/xhtml" targetNamespace="http://www.appflower.com/schema/" elementFormDefault="qualified">
	<xs:annotation>
		<xs:documentation>
			
		</xs:documentation>
	</xs:annotation>
  
  <!-- Imported XHTML Namespace - adds XHTML 1.1 Strict content -->
  
  <xs:import namespace="http://www.w3.org/1999/xhtml" schemaLocation="xhtml1-strict.xsd" i:name="XHTML1.1 Strict" />
	
    
  <!-- Types -->
    
	<xs:simpleType name="inputType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This is the data type of form fields. It determines what kind of field will be rendered.
				It is an enumeration or placeholder and it may have the following values:
				
				input 					- simple text field (this is the default)
				textarea 				- the equavilent of HTML textarea tag
				checkbox 				- A checkbox
				radio 					- A radio button element
				password 				- A password field
				hidden 					- A hidden field
				file 					- A file upload field
				combo 					- A combi panel (combination of input and HTML select)
				extendedCombo			- Creates a combo that renders its elements as hyperlinks
				extendedDayTimeSelect	- A date selector that lets you define time frames. See docs.
				itemSelectorAutoSugges	- Like a multicombo with auto suggest feature (fiters items as you type into the search field).
				remoteComboAutoSuggest	- Extended combo box, wuth auto suggest feature. See docs.
				multicomobo 			- same as above, but selecting multiple choices is possible
				doublemulticombo 		- Two compo panels, suitable for specifying many-to many relationships. Drag &amp; Drop
				static 					- Renders data as plain text. Not editable, not POSTable.
				doubletree 				- Like doublemulticombo, but renders two tree views instead, thus suports grouping. Drag &amp; Drop
				datetime 				- A date and time input (YYYY-MM-DD HH:ii:ss). 
				date     				- Date input            (YYYY-MM-DD)
				
			</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="i:varType">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="input"/>
					<xs:enumeration value="textarea"/>
					<xs:enumeration value="checkbox"/>
					<xs:enumeration value="radio"/>
					<xs:enumeration value="password"/>
					<xs:enumeration value="hidden"/>
					<xs:enumeration value="file"/>
					<xs:enumeration value="combo"/>
					<xs:enumeration value="extendedCombo"/>		
					<xs:enumeration value="extendedDayTimeSelect"/>			
					<xs:enumeration value="itemSelectorAutoSuggest"/>
					<xs:enumeration value="remoteComboAutoSuggest"/>
					<xs:enumeration value="multicombo"/>
					<xs:enumeration value="doublemulticombo"/>
					<xs:enumeration value="static"/>
					<xs:enumeration value="doubletree"/>
					<xs:enumeration value="datetime"/>
					<xs:enumeration value="date"/>
					<xs:whiteSpace value="collapse"/>
				</xs:restriction>
			</xs:simpleType>	
		</xs:union>
 	</xs:simpleType>
    
	<xs:simpleType name="stateType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This is the data type of the state of form fields.
				There are three valid states:
				
				editable 		- Normal state, field can be edited and will posted. This is the default
				readonly 		- Field cannot be edited but will still be posted
				disabled 		- Field may not be edited and wont be posted
			</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="i:varType">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="editable"/>
					<xs:enumeration value="readonly"/>
					<xs:enumeration value="disabled"/>
					<xs:whiteSpace value="collapse"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:union>
	</xs:simpleType>
  
  
	<xs:simpleType name="alignType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				These are the possible values of align attribute of a grid column.
				
				left (default)
				center
				right
				
			</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="i:varType">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="left"/>
					<xs:enumeration value="center"/>
					<xs:enumeration value="right"/>
					<xs:whiteSpace value="collapse"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:union>
	</xs:simpleType>
	
	
	<xs:simpleType name="buttonType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This is the data type for buttons. It determines what kind of button will be
				created.
				
				normal 		- A simple button, it will trigger some action or may execute JS.
				submit 		- A submit button, will POST list or edit view. 
				reset 		- A reset button				
				
			</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="i:varType">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="button"/>
					<xs:enumeration value="reset"/>
					<xs:enumeration value="submit"/>
					<xs:whiteSpace value="collapse"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:union>
	</xs:simpleType>
	

	<xs:simpleType name="valueType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				The type of the source of a form field value. It may be defined as:
				
				orm 		- read the data from DB
				file 		- read the data from file
				static 		- a constant value
				
			</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="i:varType">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="orm"/>
					<xs:enumeration value="file"/>
					<xs:enumeration value="static"/>
					<xs:whiteSpace value="collapse"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:union>
	</xs:simpleType>
	
	<xs:simpleType name="fetchType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This determines whether the method is a static method.
				No other type is currently supported.
				
				static			- The method is static.	
				instance        - The method is not static, object required
			</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="i:varType">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="static"/>
					<xs:enumeration value="instance"/>
					<xs:whiteSpace value="collapse"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:union>
	</xs:simpleType>
	
	
	<xs:simpleType name="areaWidthType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This is the type for panel widths. Its value must be between 1 and 0.
			</xs:documentation>
		</xs:annotation>
		 <xs:restriction base="xs:float">
		  	<xs:maxInclusive value="1"></xs:maxInclusive>
		  	<xs:minInclusive value="0"></xs:minInclusive>
		  	<xs:whiteSpace value="collapse"/>
		  </xs:restriction>
	</xs:simpleType>
	
	
	<xs:simpleType name="viewType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This data type determines the type of the view.
				It may have the following values:
				
				edit 		- An edit view (update or create opartions)
				list 		- A list view (Renders a grid)
				show 		- A show view (contents of source as plain text)
				wizard 		- A wizard view (Windows-like wizards)
				html 		- A HTML view (custom HTML content, messages)
				layout 		- A component glueing view (Pages)
				
			</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="i:varType">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="edit" />
					<xs:enumeration value="list" />
					<xs:enumeration value="show" />
					<xs:enumeration value="layout" />
					<xs:enumeration value="html" />
					<xs:enumeration value="wizard" />
					<xs:enumeration value="info" />
					<xs:whiteSpace value="collapse"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:union>
	</xs:simpleType>
	
	
	<xs:simpleType name="areaType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This data type defines the possible values of "area" element's type attribute.
				
				It is used only in Pages, may have the following values:
				
				sidebar 		- Panel on the left side of the screen
				content 		- Main content area
				footer  		- Area at the bottom of the screen
						
			</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="i:varType">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="sidebar" />
					<xs:enumeration value="content" />
					<xs:enumeration value="footer" />
					<xs:whiteSpace value="collapse"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:union>
	</xs:simpleType>
	
	
	<xs:simpleType name="displayType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				Depricated: This type is not in use anymore!
				
			</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="i:varType">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="normal" />
					<xs:enumeration value="obfuscated" />
					<xs:whiteSpace value="collapse"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:union>
	</xs:simpleType>
	
	<xs:simpleType name="sortType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This is the data type of a column's sort attribute.
				It determines the direction of sorting:
				
				ASC 		- Ascending
				DESC 		- Descending
				
			</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="i:varType">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="ASC" />
					<xs:enumeration value="DESC" />
					<xs:whiteSpace value="collapse"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:union>
	</xs:simpleType>
	

	<xs:simpleType name="internalUriType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This is the data type of symfony internal URIs. The value must be a string, in the following
				format:
			
				/module/action
				
				or
					
				/module/action?param1=value1&amp;param2=value2
				
			</xs:documentation>
		</xs:annotation>
		 <xs:restriction base="xs:token">
		  	<xs:pattern value="([/]{0,1}[A-Za-z0-9_]+[/]{1}[A-Za-z0-9_]+)|([/]{0,1}[A-Za-z0-9_]+[/]{1}[A-Za-z0-9_]+([/]{1}[A-Za-z0-9_])*)|([/]{0,1}[A-Za-z0-9_]+/[A-Za-z0-9_\{\}]+\?[A-Za-z0-9_]+=[A-Za-z0-9_\{\}@]+(&amp;[A-Za-z0-9_]+=[A-Za-z0-9_\{\}@]+)*&amp;?)|(\{[a-zA-Z0-9]+\})"/>
		  	<xs:whiteSpace value="collapse"/>
		  </xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="listType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This data type is good for comma separated lists ",".
				The items in the list may contain only letters (english ABC) and numbers 				
			</xs:documentation>
		</xs:annotation>
		 <xs:restriction base="xs:token">
		  	<xs:pattern value="([A-Za-z0-9_:\*]+[,]{0,1})+"/>
		  	<xs:whiteSpace value="collapse"/>
		  </xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="varType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				The data type of placeholders. Format:
				
				{string}
				
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:pattern value="\{[A-Za-z0-9_\-]+\}"/>
			<xs:whiteSpace value="collapse"/>
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="arrayType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This type defines an array (key => value pairs).
				The array can be associative or numeric, and should look like this:
				
				[foo: bar,fofo: barbar]
				
				or
				
				[0 => foo, 1: bar]
				
				You have to use the keys, even if array is numerically indexed! 
				
			</xs:documentation>
		</xs:annotation>
		 <xs:restriction base="xs:token">
		  	<xs:pattern value="\[([A-Za-z0-9]+:[A-Za-z0-9.\[\],]+,{0,1})+\]"/>
		  	<xs:whiteSpace value="collapse"/>
		  </xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="permissionType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This data type is used to define a list of access rights for a widget. These are strings.
				The character "*" (asterisk) means there are no restrictions, and this is the default value.
				
				Otherwise such a definition should look like this:
				
				[foo, bar]
				
				There is an AND relationship between the rights.
				
			</xs:documentation>
		</xs:annotation>
		 <xs:restriction base="xs:token">
		  	<xs:pattern value="([A-Za-z\*]+[,]{0,1})+"/>
		  	<xs:whiteSpace value="collapse"/>
		  </xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="absoluteUriType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				Data type of absolute paths pointing to files, used for image srcs. Nix* kind of syntax is expected.	
			</xs:documentation>
		</xs:annotation>
		 <xs:restriction base="xs:token">
		  	<xs:pattern value="/[A-Za-z0-9/\-_]+\.[a-z]{1,4}"/>
		  	<xs:whiteSpace value="collapse"/>
		  </xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="pathType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				Data type of absolute paths pointing to directories. Nix* kind of syntax is expected. 	
			</xs:documentation>
		</xs:annotation>
		 <xs:restriction base="xs:token">
		  	<xs:pattern value="(/[A-Za-z0-9\-_]+[/]{0,1})+"/>
		  	<xs:whiteSpace value="collapse"/>
		  </xs:restriction>
	</xs:simpleType>
	
	
	<xs:simpleType name="scriptType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This one is the data type for JS calls.	
				It is only for function calls, the function body must be defined in external file!
			</xs:documentation>
		</xs:annotation>
		 <xs:restriction base="xs:token">
		  	<xs:pattern value="[a-zA-Z0-9\-_]+\([^\)]+\);"/>
		  	<xs:whiteSpace value="collapse"/>
		  </xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="externalUriType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This is the data type for external URLs. A valid value is any internet URL with protocol.
			</xs:documentation>
		</xs:annotation>
		 <xs:restriction base="xs:token">
		  	<xs:pattern value="[a-z]{3,4}://[A-Za-z0-9_\.\-]+"/>
		  	<xs:whiteSpace value="collapse"/>
		  </xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="webUriType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This is the data type for web (http/https) urls. A valid value is a http(s) address.
			</xs:documentation>
		</xs:annotation>
		 <xs:restriction base="xs:token">
		  	<xs:pattern value="^http[s]{0,1}://[A-Za-z0-9_\.\-]+$"/>
		  	<xs:whiteSpace value="collapse"/>
		  </xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="combinedUriType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This is the data type for urls. Its value can be an internal symfony URI or
				any URL. 
			</xs:documentation>
		</xs:annotation>
		<xs:union  memberTypes="i:internalUriType xs:anyURI" />
	</xs:simpleType>
	
	<xs:simpleType name="dbNameType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				The data type for database column names. It is used by the column's
				"name" attribute. 				
			</xs:documentation>
		</xs:annotation>
		 <xs:restriction base="xs:token">
		  	<xs:pattern value="[A-Za-z0-9_]+"/>
		  	<xs:whiteSpace value="collapse"/>
		  </xs:restriction>
	</xs:simpleType>
	
	
	<xs:simpleType name="handlerType">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				The data type for javascript event handlers.
				
			</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="i:varType">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="beforedestroy" />
					<xs:enumeration value="beforehide" />
					<xs:enumeration value="beforerender" />
					<xs:enumeration value="beforeshow" />
					<xs:enumeration value="beforestaterestore" />
					<xs:enumeration value="beforestatesave" />
					<xs:enumeration value="blur" />
					<xs:enumeration value="change" />
					<xs:enumeration value="check" />
					<xs:enumeration value="destroy" />
					<xs:enumeration value="disable" />
					<xs:enumeration value="enable" />
					<xs:enumeration value="focus" />
					<xs:enumeration value="hide" />
					<xs:enumeration value="invalid" />
					<xs:enumeration value="move" />
					<xs:enumeration value="render" />
					<xs:enumeration value="resize" />
					<xs:enumeration value="show" />
					<xs:enumeration value="specialkey" />
					<xs:enumeration value="staterestore" />
					<xs:enumeration value="statesave" />
					<xs:enumeration value="valid" />
					<xs:enumeration value="click" />
					<xs:enumeration value="beforeselect" />
					<xs:enumeration value="collapse" />
					<xs:enumeration value="expand" />
					<xs:enumeration value="keydown" />
					<xs:enumeration value="keyup" />
					<xs:enumeration value="keypress" />
					<xs:enumeration value="select" />
					<xs:enumeration value="autosize" />
					<xs:enumeration value="beforequery" />
					<xs:enumeration value="activate" />
					<xs:enumeration value="initialize" />
					<xs:enumeration value="beforepush" />
					<xs:enumeration value="beforesync" />
					<xs:enumeration value="push" />
					<xs:enumeration value="sync" />
					<xs:whiteSpace value="collapse"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:union>
	</xs:simpleType>
	
    
    <!-- Attribute groups -->
    
    <xs:attributeGroup name="fieldAttributes">
        <xs:annotation>
            <xs:documentation xml:lang="en">
               These are the attributes for each field, checkbox and radio element.
               All of them are optional, except for "name", which is required:
            
            	name 		- The name of the field
				label 		- The label text
				selected 	- Works only with combo fileds, it specifies the selected value. See the docs for info.
				type 		- type of the field
            	state 		- state of the field
            	value 		- An alternate way to provide a value for the field.
            	style 		- a css class that should be applied to the field
            	width		- Width of the field in pixels
            	height		- height of the field in pixels
            	checked 	- Makes only sense in case of checkbox or radio button element, determines if the button is checked
               	rich		- Works with textarea only. Determines whether rich text editor should be rendered.
                content		- If defined, its value will be used as field value.
                fromLegend	- Label for doublemulticiombo and similar fields (from part)
                toLegend	- same as above for the "to" part.
                clear		- Determined whether or not the "Clear" button should be rendered for doublemulticombo.
                session		- ???
                disabled    - Determines whether or not the field is disabled.
                permissions - Access rights required to render the element.
                plugin		- Reference to extra JS code to be loaded and applied to the field
                url			- ???
               
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="name" type="xs:token" use="required" />
        <xs:attribute name="label" type="xs:token" use="optional" default="" />
        <xs:attribute name="selected" type="xs:token" use="optional" default="" />
        <xs:attribute name="type" type="i:inputType" use="optional" default="input" />
        <xs:attribute name="state" type="i:stateType" use="optional" default="editable" />
        <xs:attribute name="value" type="xs:token" use="optional" />
        <xs:attribute name="style" type="xs:token" use="optional" />
        <xs:attribute name="width" type="xs:positiveInteger" use="optional" /> 
    	<xs:attribute name="height" type="xs:token" use="optional" /> 
		<xs:attribute name="checked" type="xs:token" use="optional" /> 
		<xs:attribute name="rich" type="xs:boolean" use="optional" default="false" /> 
 		<xs:attribute name="assignid" type="xs:boolean" fixed="true" />
 		<xs:attribute name="content" type="xs:token" use="optional" />
 		<xs:attribute name="fromLegend" type="xs:token" use="optional" default="Options" />
 		<xs:attribute name="toLegend" type="xs:token" use="optional" default="Selected" />
 		<xs:attribute name="clear" type="xs:boolean" use="optional" default="true" /> 
 		<xs:attribute name="session" type="xs:boolean" use="optional" default="false" />
 		<xs:attribute name="disabled" type="xs:boolean" use="optional" default="false" />
 		<xs:attribute name="permissions" type="i:permissionType" default="*" />        
 		<xs:attribute name="plugin" type="xs:token" use="optional" default="*" /> 
 		<xs:attribute name="url" type="xs:token" use="optional" default="*" />
 		           
    </xs:attributeGroup>
    
	<xs:attributeGroup name="columnAttributes">
      <xs:annotation>
            <xs:documentation xml:lang="en">
               These are the attributes for each column element.
     
            	name 		- The name of the column in db
            	qtip		- Whether or not to show full text of column onmouseover. See docs. 
            	label		- Column title text
            	help 		- Some help text that will be displayed when hovering the title.
            	width 		- The column's width in pixels
            	editable 	- Determines if inline editing should be enabled
            	sortable 	- Determines if sorting is possible on the column
            	resizable 	- Determines if the column can be resized
            	style 		- a css class that should be applied to the column
            	isid		- Wheter or not the column should be handled as "id". See docs.
            	groupField	- If true, the list will be grouped by this field.
            	sort		- Sorting direction
            	hidden		- Is this column visible?
            	hieable 	- May the user hide this column?
            	align		- Text align
            	filter		- Declares filter type to be used with remote filtering. See docs.
            	permissions - Access rights required to render the element.
            	type		- An alternate way to define filter type, works with simple types only.
            	sortType	- Specifies sorting method to be used by type of data in the column. See docs.
            	sortIndex	- Specifies index to use for sorting. See docs.
            	contextMenu - NOT IMPLEMENTED.	
               
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="name" type="i:dbNameType" use="optional" />
        <xs:attribute name="qtip" type="xs:boolean" use="optional" default="false" />
        <xs:attribute name="label" type="xs:token" use="required" />
        <xs:attribute name="help" type="xs:token" use="optional" />
		<xs:attribute name="width" type="xs:positiveInteger" use="optional" />
        <xs:attribute name="editable" type="xs:boolean" use="optional" default="false" />
		<xs:attribute name="sortable" type="xs:boolean" use="optional" default="true" />
		<xs:attribute name="resizable" type="xs:boolean" use="optional" default="true" />
        <xs:attribute name="style" type="xs:token" use="optional" />  
        <xs:attribute name="isid" type="xs:boolean" use="optional" />
        <xs:attribute name="groupField" type="xs:boolean" use="optional" />
        <xs:attribute name="sort" type="i:sortType" use="optional" />
        <xs:attribute name="hidden" type="xs:boolean" use="optional" default="false"/>
        <xs:attribute name="hideable" type="xs:boolean" use="optional" default="true" />
        <xs:attribute name="align" type="i:alignType" use="optional" default="left" />
        <xs:attribute name="assignid" type="xs:boolean" fixed="true" />
        <xs:attribute name="filter" type="i:arrayType" use="optional" />
        <xs:attribute name="permissions" type="i:permissionType" default="*" />
        <xs:attribute name="type" type="xs:token" use="optional" />
        <xs:attribute name="sortType" type="xs:token" default="none" use="optional" />
        <xs:attribute name="sortIndex" type="xs:token" use="optional" />
        <xs:attribute name="contextMenu" type="xs:token" use="optional" />
    </xs:attributeGroup>

	<xs:attributeGroup name="showAttributes">
        <xs:annotation>
            <xs:documentation xml:lang="en">
              Depricated: This element is not in use anymore!
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="name" type="xs:token" use="required" />
        <xs:attribute name="display" type="i:displayType" use="optional" default="normal" />
        <xs:attribute name="editable" type="xs:boolean" use="optional" default="false" />
		<xs:attribute name="label" type="xs:token" use="required" />
        <xs:attribute name="comment" type="xs:token" use="optional" />
        <xs:attribute name="style" type="xs:token" use="optional" />  
        <xs:attribute name="assignid" type="xs:boolean" fixed="true" />
        <xs:attribute name="permissions" type="i:permissionType" default="*" />
    </xs:attributeGroup>
	
	
	<xs:attributeGroup name="buttonAttributes">
        <xs:annotation>
            <xs:documentation xml:lang="en">
               These are the attributes used by button elements
     
            	name 		- The name of the field
				label 		- The label of the button
				icon		- An image to attach to the button as icon
				iconCls		- A CSS class name that adds icon image to the button.
				action 		- An internal URI
            	state 		- state of the field
            	style 		- a css class that should be applied to the field
            	updater		- Whether or not a comet-like request should be started. See docs.
            	permissions -  Access rights required to render the element.
            	
            	               
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="name" type="xs:token" use="required" />
		<xs:attribute name="label" type="xs:token" use="required" />
		<xs:attribute name="icon" type="i:absoluteUriType" use="optional" />
		<xs:attribute name="iconCls" type="xs:token" use="optional" />
        <xs:attribute name="action" type="i:combinedUriType" use="required" />
        <xs:attribute name="state" type="i:stateType" use="optional" default="editable" />
		<xs:attribute name="style" type="xs:token" use="optional" />
		<xs:attribute name="updater" type="xs:boolean" use="optional" default="false" />
		<xs:attribute name="permissions" type="i:permissionType" default="*" />
    </xs:attributeGroup>
	

    <!-- Elements -->
    
    <!-- Element groups -->
    
    <xs:group name="actionelements">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		This is a group of elements common to all actions
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:sequence>
	    <xs:element ref="i:handler" minOccurs="0" maxOccurs="unbounded" />
	  </xs:sequence>
	</xs:group> 
	
	
    <xs:group name="fieldelements">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		This group of elements is common to all form fields.
	  		These are the children of the field element.
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:sequence>
	    <xs:element ref="i:value" minOccurs="0" maxOccurs="1" />
	    <xs:element ref="i:help" minOccurs="0" maxOccurs="1" />
	    <xs:element ref="i:comment" minOccurs="0" maxOccurs="1" />
	    <xs:element ref="i:validator" minOccurs="0" maxOccurs="unbounded" />
	    <xs:element ref="i:handler" minOccurs="0" maxOccurs="unbounded" />
	    <xs:element ref="i:trigger" minOccurs="0" maxOccurs="1" />
	    <xs:element ref="i:window" minOccurs="0" maxOccurs="1" />
	  </xs:sequence>
	</xs:group> 
    
    
    <!--  Simple elements -->
    
    
     <xs:element name="class">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            Defines the name of a PHP class
        </xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
      	<xs:attributeGroup ref="i:commonAttributes" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="error">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            Error message text to be used in i:validator element.
        </xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
      	<xs:attributeGroup ref="i:commonAttributes" />
      </xs:complexType>
    </xs:element>
    
    
    <xs:element name="visible">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            Comma separated list of columns to be rendered in the grid.
        </xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
      	<xs:simpleContent>
      		<xs:extension base="i:listType">
      			<xs:attributeGroup ref="i:commonAttributes" />
      		</xs:extension>
      	</xs:simpleContent>
      </xs:complexType>
    </xs:element>
    
	<xs:element type="i:listType" name="hidden" />
	<xs:element type="i:listType" name="level" />
    
    <!-- Complex elements -->
    
    <xs:element name="title">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            This element defines the title text of a view
        </xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
      	<xs:attributeGroup ref="i:commonAttributes" />
        <xs:attribute name="parsable" type="xs:boolean" fixed="true" />
        <xs:attribute name="container" type="xs:boolean" fixed="true" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="trigger">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            Thisrenders as a special button which is bound to a field. It opens a popup window. See docs.
            
            text 		- Custom text for the button
            icon		- Path to an image that should be attached to the buttons as icon. 
            permissions -  Access rights required to render the element.
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
      	<xs:attributeGroup ref="i:commonAttributes" />
        <xs:attribute name="text" type="xs:token" use="optional" />
        <xs:attribute name="icon" type="i:absoluteUriType" use="optional" default="/images/famfamfam/cancel.png" />
        <xs:attribute name="parsable" type="xs:boolean" fixed="true" />
        <xs:attribute name="permissions" type="i:permissionType" default="*" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="window">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            The element defines the properties of the popup window opened by the trigger element.
            
            Please not that this is not a real window, but only a DHTML layer.
            
            title			- Window title
            component		- The URI of a widget that should be loaded in the window
            className		- Name of a PHP class (see docs)
            methodName		- Name of a public static method (see docs)
            width			- Window width in pixels
            iconCls			- A CSS class name that adds icon image to the button.
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
      	<xs:attributeGroup ref="i:commonAttributes" />
        <xs:attribute name="title" type="xs:token" use="required" />
        <xs:attribute name="component" type="i:internalUriType" use="required" />
        <xs:attribute name="className" type="xs:token" use="required" />
        <xs:attribute name="methodName" type="xs:token" use="required" />
        <xs:attribute name="width" type="xs:positiveInteger" use="optional" default="500" />
        <xs:attribute name="iconCls" type="xs:token" use="optional" />
        <xs:attribute name="parsable" type="xs:boolean" fixed="true" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="description">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            This element contains the description of a widget. Also used to define widget help.
            
            image			- Path to an image file to be shown in the widget selector's listing. Usually a screenshot of the widget.         
            condition		- It is used only in alternateDescriptions element. Determines the condition when this description should be used.
            permissions 	-  Access rights required to render the element.
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
      	<xs:sequence>
      		<xs:any namespace="http://www.w3.org/1999/xhtml" minOccurs="0" maxOccurs="unbounded" />
      	</xs:sequence>
      	<xs:attributeGroup ref="i:commonAttributes" />
      	<xs:attribute name="image" type="xs:token" use="optional" />
      	<xs:attribute name="condition" type="xs:token" use="optional" />
        <xs:attribute name="parsable" type="xs:boolean" fixed="true" />
        <xs:attribute name="container" type="xs:boolean" fixed="true" />
        <xs:attribute name="permissions" type="i:permissionType" default="*" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="alternateDescriptions">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            This element holds description elements, alternatives to the main description of the widget.
            
            permissions 	-  Access rights required to render the element.
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
      	<xs:sequence>
      		<xs:element ref="i:description" minOccurs="1" maxOccurs="unbounded" />
      	</xs:sequence>
      	<xs:attributeGroup ref="i:commonAttributes" />
        <xs:attribute name="parsable" type="xs:boolean" fixed="true" />
        <xs:attribute name="container" type="xs:boolean" fixed="true" />
        <xs:attribute name="permissions" type="i:permissionType" default="*" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="extrahelp">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            This element defines some extra information about a glued page.
            It is a kind of help.
            
            permissions -  Access rights required to render the element.
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
      	<xs:sequence>
      		<xs:any namespace="http://www.w3.org/1999/xhtml" minOccurs="0" maxOccurs="unbounded" />
      	</xs:sequence>
      	<xs:attributeGroup ref="i:commonAttributes" />
        <xs:attribute name="parsable" type="xs:boolean" fixed="true" />
        <xs:attribute name="container" type="xs:boolean" fixed="true" />
        <xs:attribute name="permissions" type="i:permissionType" default="*" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="body">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            Depricated: This element is not in use anymore!
        </xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
      	<xs:sequence>
      		<xs:any namespace="http://www.w3.org/1999/xhtml" minOccurs="0" maxOccurs="unbounded" />
      	</xs:sequence>
      	<xs:attributeGroup ref="i:commonAttributes" />
      	<xs:attribute name="title" type="xs:token" use="optional" />
        <xs:attribute name="parsable" type="xs:boolean" fixed="true" />
        <xs:attribute name="container" type="xs:boolean" fixed="true" />
        <xs:attribute name="permissions" type="i:permissionType" default="*" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="confirm">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            This one will be rendered as a confirm dialogue on client side.
            
            url			- The URL to redirect to when dialogue is rejected.
            title		- Custom title text of the dialogue
            permissions -  Access rights required to render the element.
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
      	<xs:attributeGroup ref="i:commonAttributes" />
      	<xs:attribute name="url" type="i:internalUriType" use="required" />
      	<xs:attribute name="title" type="xs:token" use="optional" default="Confirmation" />
        <xs:attribute name="parsable" type="xs:boolean" fixed="true" />
        <xs:attribute name="container" type="xs:boolean" fixed="true" />
        <xs:attribute name="permissions" type="i:permissionType" default="*" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="component">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            This element refers to a widget to be included as part of a Page.
            
            name			- SF action name
            module			- SF module name
            post			- An URI. Overrides the widgets default action. See docs.
            column			- Which column the widget should be placed to (relevant only in Pages with more than one column)
            refersh			- Automatic reload enabler and delay
            permissions 	-  Access rights required to render the element.
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
      	<xs:sequence>
        	<xs:element ref="i:params" minOccurs="0" maxOccurs="1" />
        </xs:sequence>
      	<xs:attributeGroup ref="i:commonAttributes" />
      	<xs:attribute name="name" type="xs:token" use="required" />
      	<xs:attribute name="module" type="xs:token" use="required" />
      	<xs:attribute name="post" type="i:internalUriType" use="optional" />
      	<xs:attribute name="column" type="xs:integer" use="optional" default="0" />
      	<xs:attribute name="refresh" type="xs:nonNegativeInteger" use="optional" default="0" />
        <xs:attribute name="parsable" type="xs:boolean" fixed="true" />
        <xs:attribute name="container" type="xs:boolean" fixed="true" />
        <xs:attribute name="permissions" type="i:permissionType" default="*" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="help">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            The element contains some help text related to a form field. It should shown when hover event occurs.
            
            permissions 	-  Access rights required to render the element.
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
      	<xs:attributeGroup ref="i:commonAttributes" />
        <xs:attribute name="parsable" type="xs:boolean" fixed="true" />
        <xs:attribute name="permissions" type="i:permissionType" default="*" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="comment">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            The element defines the comment text that should be rendered beneath the form field.
            
            permissions 	-  Access rights required to render the element.
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
      	<xs:attributeGroup ref="i:commonAttributes" />
        <xs:attribute name="parsable" type="xs:boolean" fixed="true" />
        <xs:attribute name="permissions" type="i:permissionType" default="*" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="options">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            This one holds optional attributes used in HTML views.
            
            autoScroll			- ???
            border				- Whether or not a border should be rendered around content area
            header				- Whether or not a header row should be placed at the top of content area.
            autoHeight			- ???
            autoEnd				- ???
            style				- A css class that should be applied to the column
            
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
      	<xs:attributeGroup ref="i:commonAttributes" />
        <xs:attribute name="autoScroll" type="xs:boolean" use="optional" default="true" />
        <xs:attribute name="border" type="xs:boolean" use="optional" default="false" />
        <xs:attribute name="header" type="xs:boolean" use="optional" default="true" />
        <xs:attribute name="autoHeight" type="xs:boolean" use="optional" default="true" />
        <xs:attribute name="autoEnd" type="xs:boolean" use="optional" default="false" />
        <xs:attribute name="style" type="xs:token" use="optional" />
        <xs:attribute name="parsable" type="xs:boolean" fixed="true" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="method">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            This element describes a method to call and its (optional) arguments
            It may contain any number of "param" elements, these represent the arguments.
            
            name			- Name of the method
            type			- Type of the method, see docs.
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:sequence>
        	<xs:element ref="i:param" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
        <xs:attribute name="name" type="xs:token" use="required" />
        <xs:attribute name="type" type="i:fetchType" use="optional" default="instance" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="item">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            This element defines an item of a combo or multicombo statically.
            It can be used within value elements.
            
            value			- Value of the item
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
        <xs:attribute name="value" type="xs:token" use="required" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="value">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            This element describes the value of a form field.
							
			The first syntax is for special cases, when you need to call
			some custom method to fill the field.
						
			The second syntax is the general one.
			
			The third syntax can be used to provide value statically (for combo, multicombo elements only).
			
			See the docs for details.
			
			type			- Type of the value
			permissions 	-  Access rights required to render the element.
			
			
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
		<xs:sequence minOccurs="1" maxOccurs="1">
        	<xs:choice>
				<xs:sequence minOccurs="0" maxOccurs="1">
					<xs:element ref="i:class" minOccurs="1" maxOccurs="1" />
        			<xs:element ref="i:method" minOccurs="1" maxOccurs="1" />
				</xs:sequence>
				<xs:sequence minOccurs="0" maxOccurs="1">
					<xs:element ref="i:source" minOccurs="1" maxOccurs="1" />
				</xs:sequence>
				<xs:sequence minOccurs="0" maxOccurs="1">
					<xs:element ref="i:item" minOccurs="1" maxOccurs="unbounded" />
				</xs:sequence>
			</xs:choice>
		</xs:sequence>
		<xs:attributeGroup ref="i:commonAttributes" />
        <xs:attribute name="type" type="i:valueType" use="required" />
        <xs:attribute name="parsable" type="xs:boolean" fixed="true" />
        <xs:attribute name="permissions" type="i:permissionType" default="*" />
      </xs:complexType>
    </xs:element>

	<xs:element name="datasource">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            This element describes the data source of a grid, edit or show view.
            
            type			- Type of data source. See docs.
            lister			- Must be set to true in case of file data source. See Docs.
            
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
			<xs:sequence>
				<xs:element ref="i:class" minOccurs="1" maxOccurs="1" />
				<xs:element ref="i:method" minOccurs="1" maxOccurs="1" />
			</xs:sequence>
        	<xs:attributeGroup ref="i:commonAttributes" />
        	<xs:attribute name="type" type="i:valueType" use="required" />
        	<xs:attribute name="lister" type="xs:boolean" use="optional" default="false" />
        	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
        	<xs:attribute name="container" type="xs:boolean" fixed="true" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="datastore">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            This element is used to define relations between form field names and db tables regarding
            automatic saving of user input. It is used only in wizard views.
            
            See docs.
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
       		<xs:sequence>
       			<xs:choice minOccurs="1" maxOccurs="unbounded">
	       			<xs:element ref="i:table" minOccurs="1" maxOccurs="unbounded" />
	       			<xs:element ref="i:file" minOccurs="1" maxOccurs="unbounded" />
       			</xs:choice>
       		</xs:sequence>
     	
        	<xs:attributeGroup ref="i:commonAttributes" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="table">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            This element represents a db table, determined where to save the user input.
            It is used only in wizard views.
            
            See docs for details!
            
            name 			- Propel class name
            select			- Triggers update operation, see docs
            alias			- A table alias, to allow multiple references to the same table.
            ignore			- Number of optional step to ignore. See docs
            insert			- Triggers insert opration, see docs
            delete			- ???
            condition		- Use this definition to save the data only if expression evaluates to true.
            json			- ???
            
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
      		<xs:sequence>
        		<xs:element ref="i:ref" minOccurs="1" maxOccurs="unbounded" />
        	</xs:sequence>
        	<xs:attributeGroup ref="i:commonAttributes" />
        	<xs:attribute name="name" type="xs:token" use="required" />
        	<xs:attribute name="select" type="xs:token" use="optional" />
        	<xs:attribute name="alias" type="xs:token" use="optional" />
        	<xs:attribute name="ignore" type="xs:positiveInteger" use="optional" />
        	<xs:attribute name="insert" type="xs:token" use="optional" />
        	<xs:attribute name="delete" type="xs:boolean" use="optional" default="false" />
        	<xs:attribute name="condition" type="xs:token" use="optional" />
        	<xs:attribute name="json" type="xs:token" use="optional" />
        	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
      </xs:complexType>
    </xs:element>
    
    
    <xs:element name="file">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            This element represents a file upload opreation.
            
            to 				- Path to move the uploaded file to.
            name			- name of the form field (upload field)
            overwrite		- Whether or not to automatically overwrite existing files when moving upload from tmp.
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
        	<xs:attributeGroup ref="i:commonAttributes" />
        	<xs:attribute name="to" type="i:pathType" use="required" />
        	<xs:attribute name="name" type="xs:token" use="required" />
        	<xs:attribute name="overwrite" type="xs:boolean" use="optional" default="false" />
        	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
      </xs:complexType>
    </xs:element>
    
	<xs:element name="params">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            This element holds parameters of its parent node.
			It contains 1 or more "param" elements.
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
        	<xs:sequence>
        		<xs:element ref="i:param" minOccurs="1" maxOccurs="unbounded" />
        	</xs:sequence>
        	<xs:attributeGroup ref="i:commonAttributes" />
        	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
      </xs:complexType>
    </xs:element>

    <xs:element name="param">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            It represents a parameter or a function argument. 
            
            name			- Name of the parameter
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType mixed="true">
      <xs:sequence>
      	<xs:any namespace="http://www.w3.org/1999/xhtml" minOccurs="0" maxOccurs="unbounded" />
      </xs:sequence>
        <xs:attribute name="name" type="xs:token" use="required" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="validator">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            This element refers to a validator to be called to validate input.
            
            name			- Class name of the validator to use (SF 1.0 or 1.2 API)
            permissions 	-  Access rights required to render the element.
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:sequence>
        	<xs:element ref="i:param" minOccurs="0" maxOccurs="unbounded" />
        	<xs:element ref="i:error" minOccurs="0" maxOccurs="1" />
        </xs:sequence>
        <xs:attributeGroup ref="i:commonAttributes" />
        <xs:attribute name="name" type="xs:token" use="required" />
        <xs:attribute name="parsable" type="xs:boolean" fixed="true" />
        <xs:attribute name="permissions" type="i:permissionType" default="*" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="proxy">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            The element defines a proxy url for list views.
            This action will be called by the client to fetch list items as JSON.
            
            url			- An internal URI
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:attributeGroup ref="i:commonAttributes" />
        <xs:attribute name="url" type="i:internalUriType" use="required" />
        <xs:attribute name="parsable" type="xs:boolean" fixed="true" />
        <xs:attribute name="container" type="xs:boolean" fixed="true" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="handler">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            The element can be used to define an event handler for a form field (and some other elements).
            
            type 		- the event type (HTML or custom event)
            action 		- Javascript code to call
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
      	<xs:sequence>
      		<xs:element ref="i:param" minOccurs="0" maxOccurs="unbounded" />
      	</xs:sequence>
      	<xs:attributeGroup ref="i:commonAttributes" />
        <xs:attribute name="type" type="i:handlerType" use="optional" default="click" />
        <xs:attribute name="action" type="xs:token" use="required" />
      	<xs:attribute name="is_script" type="xs:boolean" use="optional" default="true" />
        <xs:attribute name="parsable" type="xs:boolean" fixed="true" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="field">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            This element describes an input field of a form.
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:choice minOccurs="1" maxOccurs="unbounded">
        	<xs:group ref="i:fieldelements" minOccurs="1" maxOccurs="1" />
        	<xs:element ref="i:if" minOccurs="1" maxOccurs="unbounded" />
        </xs:choice>
        <xs:attributeGroup ref="i:fieldAttributes" />
        <xs:attributeGroup ref="i:commonAttributes" />
        <xs:attribute name="parsable" type="xs:boolean" fixed="true" />
        <xs:attribute name="container" type="xs:boolean" fixed="true" />
      </xs:complexType>
    </xs:element>

	<xs:element name="show">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            Depricated: The element is not in use anymore!
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:attributeGroup ref="i:showAttributes" />
        <xs:attributeGroup ref="i:commonAttributes" />
        <xs:attribute name="parsable" type="xs:boolean" fixed="true" />
        <xs:attribute name="container" type="xs:boolean" fixed="true" />
      </xs:complexType>
    </xs:element>
  
    <xs:element name="button">
      <xs:annotation>
        <xs:documentation xml:lang="en">
            This element represents a push button. Can be used in forms.
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
      	<xs:sequence>
        	<xs:element ref="i:handler" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
       	<xs:attributeGroup ref="i:commonAttributes" />
       	<xs:attributeGroup ref="i:buttonAttributes" />
     	<xs:attribute name="type" type="i:buttonType" use="optional" default="button" />
      	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
        <xs:attribute name="assignid" type="xs:boolean" fixed="true" />
        <xs:attribute name="container" type="xs:boolean" fixed="true" />
      	<xs:attribute name="permission" type="i:permissionType" default="*" />
      </xs:complexType>
    </xs:element>
    
    <xs:element name="link">
      <xs:annotation>
        <xs:documentation xml:lang="en">
            This element is used to create hyperlinks. It has two attributes:
            
            name				- A unique name (ID).
            action 				- an internal or external URL to point to
            text 				- The text of the link
            permissions 		-  Access rights required to render the element.
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
      	<xs:attributeGroup ref="i:commonAttributes" />
      	<xs:attribute name="name" type="xs:QName" use="required" />
      	<xs:attribute name="type" type="xs:token" use="optional" fixed="link" />
        <xs:attribute name="action" type="i:combinedUriType" use="required" />
        <xs:attribute name="text" type="xs:token" use="required" />
        <xs:attribute name="assignid" type="xs:boolean" fixed="true" />
        <xs:attribute name="container" type="xs:boolean" fixed="true" />
        <xs:attribute name="parsable" type="xs:boolean" fixed="true" />
        <xs:attribute name="permissions" type="i:permissionType" default="*" />
      </xs:complexType>
    </xs:element>
    
     <xs:element name="radiogroup">
      <xs:annotation>
        <xs:documentation xml:lang="en">
            The element is the container of radio buttons (if you need to group them). 
           
           	name				- The name of the group
           	label				- Form field label of the group
           	comment				- Text to be rendered beneath the group (same as comment element)
           	help				- Text to be shown on hovering over the group (same as help element)
           	permissions 		-  Access rights required to render the element.
           
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
      	<xs:sequence>
        	<xs:element ref="i:field" minOccurs="1" maxOccurs="unbounded" />
        </xs:sequence>
      	<xs:attributeGroup ref="i:commonAttributes" />
      	<xs:attribute name="name" type="xs:token" use="required" />
      	<xs:attribute name="label" type="xs:token" use="required" />
      	<xs:attribute name="comment" type="xs:token" use="optional" />
      	<xs:attribute name="help" type="xs:token" use="optional" />
      	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
        <xs:attribute name="container" type="xs:boolean" fixed="true" />
        <xs:attribute name="permissions" type="i:permissionType" default="*" />
      </xs:complexType>
    </xs:element>



	<xs:element name="fields">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		This is a container element and has different purpose in each view.
				
			See docs dor details!
			
			
			tree			- Whether or not to render a tree grid
			selectable		- Whether or not to add "Select .." options to moreactions menu
			exportable		- Is the list exportable to CSV?
			title			- List title text
			select			- Makes rows selectable, the grid can be POSTed (selection or everything).
			pager			- Wheteher or not to add pager controls
			action			- List action (URI) to use when POSTing grid data
			multipart		- Should be used in edit view when files has to be uploaded.
			remoteSort		- Enables server-side sorting. See docs.
			submit			- Used in grids, to post selection
			classic			- When POSTing form, dont use AJAX
			icon			- An image to attach to the "Save Selection" button as icon
			iconCls			- A CSS class name that adds icon image to the "Save selection" button.
			bodyStyle		- ???
			border			- Whether or not to draw a border around content area
			portal			- ???
			permissions 	-  Access rights required to render the element.
			label			- Custom text for the "Save Selection" button
			redirect		- An URI to redirect to upon successful submit (grid and edit)
			expandButton	- Places "Expanded View" button at the top of the list and makes the rows collapsable / expandable
			remoteLoad		- Used in tree grids, makes nodes in sublevels to load only upon request. Good for big trees. See docs.
			labelWidth		- Width of form field labels in pixels
			exportFrom		- Specifies alternate action to use for CSV export. See docs.
			remoteFilter	- Allows filtering of lists.
			plugin			- Extra JS to be loaded and applied to the form
			
	
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:complexType>
      	<xs:choice minOccurs="1" maxOccurs="1">
					<xs:choice minOccurs="0" maxOccurs="unbounded" i:view="edit">
						<xs:element ref="i:field" minOccurs="1" maxOccurs="unbounded"/>
      					<xs:element ref="i:button" minOccurs="0" maxOccurs="unbounded"/>
      					<xs:element ref="i:link" minOccurs="0" maxOccurs="unbounded"/>
      					<xs:element ref="i:radiogroup" minOccurs="0" maxOccurs="unbounded"/>
      					<xs:element ref="i:if" minOccurs="1" maxOccurs="unbounded"/>
					</xs:choice>
					<xs:choice minOccurs="0" maxOccurs="1" i:view="list">
						<xs:sequence>
							<xs:element ref="i:column" minOccurs="1" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:choice>
					<xs:choice minOccurs="0" maxOccurs="1" i:view="show">
						<xs:sequence>
							<xs:element ref="i:show" minOccurs="1" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:choice>
      	</xs:choice>
      	<xs:attribute name="resetable" type="xs:boolean" use="optional" default="true" />
      	<xs:attribute name="resetlabel" type="xs:token" use="optional" default="Reset" />
      	<xs:attribute name="submitlabel" type="xs:token" use="optional" default="Submit" /> 	
      	<xs:attribute name="tree" type="xs:boolean" use="optional" default="false" />
      	<xs:attribute name="selectable" type="xs:boolean" use="optional" default="true" />
      	<xs:attribute name="exportable" type="xs:boolean" use="optional" default="true" />
      	<xs:attribute name="title" type="xs:token" use="optional" default="" />
      	<xs:attribute name="select" type="xs:boolean" use="optional" default="false" />
      	<xs:attribute name="pager" type="xs:boolean" use="optional" default="true" />
      	<xs:attribute name="url" type="i:internalUriType" use="optional" default="n/a" />
      	<xs:attribute name="action" type="i:internalUriType" use="optional" default="n/a" />
      	<xs:attribute name="multipart" type="xs:boolean" use="optional" default="false" />
      	<xs:attribute name="remoteSort" type="xs:boolean" default="false" />
      	<xs:attribute name="submit" type="xs:boolean" use="optional" default="true" />
      	<xs:attribute name="classic" type="xs:boolean" use="optional" default="false" />
      	<xs:attribute name="iconCls" type="xs:token" use="optional" />
      	<xs:attribute name="icon" type="xs:token" use="optional" default="/images/famfamfam/accept.png" />
      	<xs:attribute name="bodyStyle" type="xs:token" use="optional" />
      	<xs:attribute name="border" type="xs:boolean" use="optional" default="true" />
      	<xs:attribute name="portal" type="xs:boolean" use="optional" default="true" />
      	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
      	<xs:attribute name="permissions" type="i:permissionType" use="optional" default="*" />
      	<xs:attribute name="label" type="xs:token" use="optional" default="Save Selection" />
      	<xs:attribute name="redirect" type="i:internalUriType" use="optional" />
      	<xs:attribute name="expandButton" type="xs:boolean" use="optional" />
      	<xs:attribute name="remoteLoad" type="xs:boolean" use="optional" />
      	<xs:attribute name="labelWidth" type="xs:positiveInteger" use="optional" default="75" />
      	<xs:attribute name="exportFrom" type="xs:token" use="optional"/>
      	<xs:attribute name="remoteFilter" type="xs:boolean" use="optional" />
      	<xs:attribute name="plugin" type="xs:token" use="optional" />
	  </xs:complexType>
	</xs:element>
	
	<xs:element name="grouping">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		In an edit view, this one can be used to arrange fields. It will transformed to
				something like fieldsets in HTML.
				It also determines the order of the fields in the view. 
				
				In a list view, it defines what columns should be grouped and by what criteria.
				
				title			- Title text of the default field set
				isSetting		- If true, an tabs are used, the tab will be rendered in a certain style.  
				collapsed		- Whether or not to render the groups in a collapsed state by default
				
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:complexType>
      	<xs:choice minOccurs="1" maxOccurs="1">
					<xs:choice minOccurs="1" maxOccurs="1" i:view="edit">
						<xs:sequence>
							<xs:element ref="i:set" minOccurs="1" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:choice>
					<xs:choice minOccurs="1" maxOccurs="1" i:view="list">
						<xs:sequence>
							<xs:element ref="i:by" minOccurs="1" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:choice>
      	</xs:choice>
      	<xs:attributeGroup ref="i:commonAttributes" />
      	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
      	<xs:attribute name="container" type="xs:boolean" fixed="true" />
      	<xs:attribute name="title" type="xs:token" default="Default" />
      	<xs:attribute name="isSetting" type="xs:boolean" default="false" />
      	<xs:attribute name="collapsed" type="xs:boolean" default="false" />      	
	  </xs:complexType>
	</xs:element>
	
	<xs:element name="if">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		This element applies a condition. If expression in "test" attribute evalutes to false,
	  		the contents of i:if won't be parsed.
	  		
	  		Any valid PHP expression is supported. Function calles must be made to built-in or static functions only.
	  		
	  		strstr(...)
	  		or
	  		Foo::Bar(arg)
	  		
	  		The element may be used as child of i:fields in Edit and Show view as well as in i:actions, i:rowactions and
	  		i:moreactions.
	  		
	  		test		- An expression to evaluate
				
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:complexType>
      	<xs:choice minOccurs="1" maxOccurs="1">
					<xs:choice minOccurs="0" maxOccurs="unbounded">
						<xs:element ref="i:field" minOccurs="1" maxOccurs="unbounded"/>
      					<xs:element ref="i:button" minOccurs="0" maxOccurs="unbounded"/>
      					<xs:element ref="i:link" minOccurs="0" maxOccurs="unbounded"/>
      					<xs:element ref="i:radiogroup" minOccurs="0" maxOccurs="unbounded"/>
					</xs:choice>
					<xs:choice minOccurs="0" maxOccurs="unbounded">
						<xs:group ref="i:fieldelements" minOccurs="1" maxOccurs="1" />
					</xs:choice>
					<xs:choice minOccurs="0" maxOccurs="unbounded">
						<xs:element ref="i:action" minOccurs="1" maxOccurs="unbounded"/>
					</xs:choice>
      	</xs:choice>
      	<xs:attributeGroup ref="i:commonAttributes" />
      	<xs:attribute name="test" type="xs:token" use="required" />    	
	  </xs:complexType>
	</xs:element>
	
	<xs:element name="by">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		This tag is used to define a grouping criteria for a list column.
	  	
	  		callback			- ???
	  		
	  	
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:complexType>
      	<xs:attribute name="ref" type="xs:QName" use="required" />
				<xs:attribute name="callback" type="xs:token" use="required" />
	  </xs:complexType>
	</xs:element>
	
	<xs:element name="set">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		This tag is used to define a fieldset in Edit Views.
	  	
	  		title			- Title text
	  		tabtitle		- Triggers tabbed rendering, title text of the tab
	  		float			- Does this field set contain multiple columns?
	  		collapsed		- Whether or not to render the field set in a collapsed state by default
	  		tabHeight		- Height of tab title in pixels
	  		iconCls			- CSS class that adds icon to the tab title
	  		
	  	
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:complexType>
		<xs:sequence>
      		<xs:element ref="i:ref" minOccurs="1" maxOccurs="unbounded"/>
      	</xs:sequence>
      	<xs:attribute name="title" type="xs:token" use="required" />
      	<xs:attribute name="tabtitle" type="xs:token" use="optional" />
      	<xs:attribute name="columns" type="xs:positiveInteger" use="optional" default="1" />
      	<xs:attribute name="float" type="xs:boolean" use="optional" default="false" />
      	<xs:attribute name="collapsed" type="xs:boolean" use="optional" default="false" />
      	<xs:attribute name="tabHeight" type="xs:positiveInteger" use="optional" default="225" />
      	<xs:attribute name="iconCls" type="xs:token" use="optional"/>
	  </xs:complexType>
	</xs:element>
	
	<xs:element name="ref">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		It refers to a field defined within the "fields" element. 
			
			to			- Name of the field to refer to
			as			- Used only in Wizard views when db column name and field name are different. See docs
			group		- Must be set to true, if ref points to a radiogroup.
			title		- ???
			tip			- ???
			json		- ???
			
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:complexType>
      	<xs:attribute name="to" type="xs:QName" use="required" />
      	<xs:attribute name="as" type="xs:token" use="optional" />
      	<xs:attribute name="break" type="xs:boolean" use="optional" default="false" />
      	<xs:attribute name="group" type="xs:boolean" use="optional" default="false" />
      	<xs:attribute name="title" type="xs:token" use="optional" />
      	<xs:attribute name="tip" type="xs:token" use="optional" />
      	<xs:attribute name="json" type="xs:token" use="optional" />  
	  </xs:complexType>
	</xs:element>
	
	<xs:element name="source">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
				This is a reference to one of the getter methods of the object returned by "datasource". The return value will be
				the value of the "field" element. 
				
				name			- Name of the method
				
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:complexType>
      	<xs:attribute name="name" type="xs:token" use="required" />
	  </xs:complexType>
	</xs:element>
	
	<xs:element name="column">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		This tag defines a column of a list view. 
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:complexType mixed="true">
      	<xs:attributeGroup ref="i:columnAttributes" />
      	<xs:attributeGroup ref="i:commonAttributes" />
      	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
      	<xs:attribute name="container" type="xs:boolean" fixed="true" />
	  </xs:complexType>
	</xs:element>
	
	<xs:element name="actions">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		The tag used to list the global actions for a given view.
	  		
	  		permissions 		-  Access rights required to render the element.
	  		
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:complexType>
      		<xs:choice maxOccurs="1" minOccurs="1">
      			<xs:choice minOccurs="1" maxOccurs="unbounded">
					<xs:element ref="i:if" minOccurs="1" maxOccurs="unbounded"/>
					<xs:element ref="i:action" minOccurs="1" maxOccurs="unbounded"/>
				</xs:choice>
      		</xs:choice>
      	<xs:attributeGroup ref="i:commonAttributes" />
      	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
      	<xs:attribute name="container" type="xs:boolean" fixed="true" />
      	<xs:attribute name="permissions" type="i:permissionType" default="*" />
	  </xs:complexType>
	</xs:element>
	
	
	<xs:element name="widgetCategories">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				This one defines those widget categries that should be listed in widget selector.
				It can be used only in Pages.
				
				permissions 		-  Access rights required to render the element.
				
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="i:category" minOccurs="1" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attributeGroup ref="i:commonAttributes" />
			<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
			<xs:attribute name="container" type="xs:boolean" fixed="true" />
			<xs:attribute name="permissions" type="i:permissionType" default="*" />
		</xs:complexType>
	</xs:element>
	
	<xs:element name="category">
		<xs:annotation>
			<xs:documentation xml:lang="en">
				Refers to a widget category. All widgets related to the category will be listed 
				in widget selector.
				
				catid			- Id of the category (db PK)
				name			- Identify a category by its name
				permissions 	-  Access rights required to render the element.
				
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="i:commonAttributes" />
			<xs:attribute name="catid" type="xs:integer" use="required" />
			<xs:attribute name="name" type="xs:token" use="optional" />
			<xs:attribute name="permissions" type="i:permissionType" default="*" />
		</xs:complexType>
	</xs:element>

	<xs:element name="rowactions">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		The tag used to list the actions related to a row in the list.
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:complexType>
    	<xs:choice minOccurs="1" maxOccurs="unbounded">
			<xs:element ref="i:if" minOccurs="1" maxOccurs="unbounded"/>
			<xs:element ref="i:action" minOccurs="1" maxOccurs="unbounded"/>
		</xs:choice>
      	<xs:attributeGroup ref="i:commonAttributes" />
      	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
      	<xs:attribute name="container" type="xs:boolean" fixed="true" />
      	<xs:attribute name="permissions" type="i:permissionType" default="*" />
	  </xs:complexType>
	</xs:element>
	
	<xs:element name="moreactions">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		The tag used to list the actions to be placed in drop-down menu placed in the top right corner of the list.
	  		
	  		permissions 		-  Access rights required to render the element.
	  		
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:complexType>
      	<xs:choice minOccurs="1" maxOccurs="unbounded">
			<xs:element ref="i:if" minOccurs="1" maxOccurs="unbounded"/>
			<xs:element ref="i:action" minOccurs="1" maxOccurs="unbounded"/>
		</xs:choice>
      	<xs:attributeGroup ref="i:commonAttributes" />
      	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
      	<xs:attribute name="container" type="xs:boolean" fixed="true" />
      	<xs:attribute name="permissions" type="i:permissionType" default="*" />
	  </xs:complexType>
	</xs:element>
	
	<xs:element name="action">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		This tag describes an action (either normal, rowaction or moreaction).
	  		
	  		name			- Unique name of the action. Also used as the label if "text" attribute is omitted. 
	  		url				- The URL to be requested
	  		pk				- Applies for rowactions only. If the primary key is not called "ID", you can name it here.
	  		condition		- When to hide this action? See docs
	  		script			- Cyustom JS to be executed
	  		params			- ???
	  		icon			- An image to attach to the button / menu item as icon (normal and moreactions)
	  		iconCls			- A CSS class name that adds icon image to the button / menu item. (normal and moreactions)
	  		tooltip			- Text to be shown when hovering over action icon (rowactions)
	  		text			- Custom text for action button.
	  		popupSettings   - Allows you define some arguments for the popup window. See docs.
	  		style			- CSS class to apply to the button / icon
	  		post			- Used only in Wizard Views, overrides default widget action. See docs
	  		forceSelection	- Action will be performed if at least 1 item is selected in the grid
	  		confirmMsg		- Action will be performed only if users confirms it.
	  		updater			- Whether or not a comet-like request should be initiated?
	  		popup			- Opens a popup layer and loads URL in this "window". By default URL will be loaded in main content area. 
	  		permissions 	-  Access rights required to render the element.
	  		
	  		
	  	</xs:documentation>
	  </xs:annotation>
	  
	  <xs:complexType>
	  	<xs:group ref="i:actionelements" minOccurs="1" maxOccurs="1" />
      	<xs:attribute name="name" type="xs:token" use="required" />
      	<xs:attribute name="url" type="i:combinedUriType" use="required" />
      	<xs:attribute name="pk" type="xs:token" use="optional" default="id" />
	  	<xs:attribute name="condition" type="xs:token" use="optional" />
      	<xs:attribute name="script" type="xs:token" use="optional" />
      	<xs:attribute name="params" type="xs:token" use="optional" />
		<xs:attribute name="icon" type="i:absoluteUriType" use="optional" />
		<xs:attribute name="iconCls" type="xs:token" use="optional" />
		<xs:attribute name="tooltip" type="xs:token" use="optional" />
		<xs:attribute name="text" type="xs:token" use="optional" />
		<xs:attribute name="style" type="xs:token" use="optional" />
		<xs:attribute name="post" type="xs:boolean" use="optional" default="false" />
		<xs:attribute name="forceSelection" type="xs:boolean" use="optional" />
		<xs:attribute name="popupSettings" type="xs:token" use="optional" />
		<xs:attribute name="confirmMsg" type="xs:string" use="optional" />
		<xs:attribute name="confirm" type="xs:boolean" use="optional" />
		<xs:attribute name="updater" type="xs:boolean" use="optional" default="false" />
		<xs:attribute name="popup" type="xs:boolean" use="optional" default="false" />
		<xs:attribute name="permissions" type="i:permissionType" default="*" />
	  </xs:complexType>
	</xs:element>
	
	<xs:element name="selectors">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		This element describes the selectors for treegrid with multiple
	  		leveles.
	  		
	  		It contains one or more "level" elements.
	  		
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:complexType>
      	<xs:sequence>
      		<xs:element ref="i:level" minOccurs="1" maxOccurs="unbounded"/>
      	</xs:sequence>
      	<xs:attributeGroup ref="i:commonAttributes" />
      	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
      	<xs:attribute name="container" type="xs:boolean" fixed="true" />
	  </xs:complexType>
	</xs:element>
	
	<xs:element name="display">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		This one is for list and show views. It is a container of
	  		multiple elements manipulating how the view gets
	  		displayed.
	  		
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:complexType>
      	<xs:sequence>
      		<xs:element ref="i:visible" minOccurs="1" maxOccurs="1"/>
			<xs:element ref="i:hidden" minOccurs="0" maxOccurs="1"/>
			<xs:element ref="i:selectors" minOccurs="0" maxOccurs="1"/>
      	</xs:sequence>
      	<xs:attributeGroup ref="i:commonAttributes" />
      	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
      	<xs:attribute name="container" type="xs:boolean" fixed="true" />
	  </xs:complexType>
	</xs:element>
	
	<xs:element name="cache">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		The element controls cacheing, by defining a set of references to
			to named elements that should be cached.
				
			Not implemented yet!
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:complexType>
      	<xs:sequence>
      		<xs:element ref="i:ref" minOccurs="1" maxOccurs="unbounded"/>
      	</xs:sequence>
      	<xs:attributeGroup ref="i:commonAttributes" />
      	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
      	<xs:attribute name="container" type="xs:boolean" fixed="true" />
	  </xs:complexType>
	</xs:element>
	
	<xs:element name="area">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		It defines an area of a Page.
	  		
	  		type			- Type of the area
	  		layout			- Must be used if you wish to divide your content area into columns. See docs.
	  		width			- Width of the area in pixels
	  		permissions 	-  Access rights required to render the element.
	  		
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:complexType>
      	<xs:choice minOccurs="1" maxOccurs="1">
      		<xs:sequence>
      			<xs:element ref="i:component" minOccurs="1" maxOccurs="unbounded"/>
      			<xs:element ref="i:params" minOccurs="0" maxOccurs="1"/>
      		</xs:sequence>
      		<xs:sequence>
      			<xs:element ref="i:tree" minOccurs="1" maxOccurs="1"/>
      		</xs:sequence>
      		<xs:sequence>
      			<xs:element ref="i:tab" minOccurs="1" maxOccurs="unbounded"/>
      		</xs:sequence>
      	</xs:choice>
      	<xs:attribute name="type" type="i:areaType" use="required" />
      	<xs:attribute name="layout" type="xs:positiveInteger" use="optional" default="1" />
      	<xs:attribute name="width" type="i:areaWidthType" use="optional" />
      	<xs:attribute name="container" type="xs:boolean" fixed="true" />
      	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
      	<xs:attribute name="permissions" type="i:permissionType" default="*" />
	  </xs:complexType>
	</xs:element>
	
	<xs:element name="tab">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		This defines a tab for tabbed Pages.
	  		
	  		title				- Tab title text
	  		name				- Name of the tab
	  		permissions 		-  Access rights required to render the element.
	  		
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:complexType>
      	<xs:choice minOccurs="1" maxOccurs="1">
      		<xs:sequence>
      			<xs:element ref="i:component" minOccurs="1" maxOccurs="unbounded"/>
      			<xs:element ref="i:params" minOccurs="0" maxOccurs="1"/>
      		</xs:sequence>
      		<xs:sequence>
      			<xs:element ref="i:tree" minOccurs="1" maxOccurs="1"/>
      		</xs:sequence>
      	</xs:choice>
      	<xs:attribute name="title" type="xs:token" use="required" />
      	<xs:attribute name="name" type="xs:token" use="optional" default="" />
      	<xs:attribute name="container" type="xs:boolean" fixed="true" />
      	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
      	<xs:attribute name="permissions" type="i:permissionType" default="*" />
	  </xs:complexType>
	</xs:element>
	
		
	<xs:element name="tree">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		This element will be rendered as a tree with expandable branches.
	  		It can be added to any area element.
	  		
	  		title				- Title text
	  		name				- Name of the tree
	  		column				- The number of column the tree should placed into. Applies to Pages with multiple columns
	  		permissions 		-  Access rights required to render the element.
	  		
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:complexType>
      	<xs:sequence>
      		<xs:element ref="i:root" minOccurs="1" maxOccurs="1"/>
      	</xs:sequence>
      	<xs:attribute name="container" type="xs:boolean" fixed="true" />
      	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
      	<xs:attribute name="title" type="xs:token" use="required" />
      	<xs:attribute name="name" type="xs:token" use="optional" />
      	<xs:attribute name="column" type="xs:integer" use="optional" default="0" />
      	<xs:attribute name="permissions" type="i:permissionType" default="*" />
	  </xs:complexType>
	</xs:element>
	
	<xs:element name="root">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		The element is the root node of a tree. All nodes must reside
	  		inside of this one.
	  		
	  		name			- Name of the node
	  		text			- Label text
	  		
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:complexType>
      	<xs:sequence>
      		<xs:element ref="i:node" minOccurs="1" maxOccurs="unbounded"/>
      	</xs:sequence>
      	<xs:attribute name="container" type="xs:boolean" fixed="true" />
      	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
      	<xs:attribute name="text" type="xs:token" use="required" />
      	<xs:attribute name="name" type="xs:token" use="optional" />
	  </xs:complexType>
	</xs:element>
	
	<xs:element name="node">
	  <xs:annotation>
	  	<xs:documentation xml:lang="en">
	  		This one is an elmenet of the tree. It may define a section (branch)
	  		or an item (link). A node may contain other nodes.
	  		
	  		name			- Name of the node
	  		text			- Label text
	  		href			- URL to point to, if node is a link
	  		
	  	</xs:documentation>
	  </xs:annotation>
	  <xs:complexType>
      	<xs:sequence>
      		<xs:element ref="i:node" minOccurs="0" maxOccurs="unbounded"/>
      	</xs:sequence>
      	<xs:attribute name="text" type="xs:token" use="required" />
      	<xs:attribute name="name" type="xs:token" use="optional" />
	  	<xs:attribute name="href" type="i:combinedUriType" use="optional" />
	  	<xs:attribute name="container" type="xs:boolean" fixed="true" />
      	<xs:attribute name="parsable" type="xs:boolean" fixed="true" />
	  </xs:complexType>
	</xs:element>
	
	<xs:element name="view">
    	<xs:annotation>
        <xs:documentation xml:lang="en">
            This is the root element of our XML structure. 
            It may contain several different types of elements depending on the type of view.
            The element has one attribute, which defines the type of the view.
            
            type 			- The view type.
            
        </xs:documentation>
      </xs:annotation>
      <xs:complexType>
				<xs:choice minOccurs="1" maxOccurs="1">
					<xs:choice minOccurs="0" maxOccurs="unbounded" i:view="edit">
							<xs:sequence>
								<xs:element ref="i:title" minOccurs="1" maxOccurs="1" />
								<xs:element ref="i:confirm" minOccurs="0" maxOccurs="1" />
								<xs:element ref="i:datasource" minOccurs="0" maxOccurs="1" />
			        			<xs:element ref="i:fields" minOccurs="1" maxOccurs="1" />
			        			<xs:element ref="i:actions" minOccurs="0" maxOccurs="1" />
			        			<xs:element ref="i:description" minOccurs="0" maxOccurs="1" />
			        			<xs:element ref="i:alternateDescriptions" minOccurs="0" maxOccurs="1" />
			        			<xs:element ref="i:grouping" minOccurs="0" maxOccurs="1" />
							</xs:sequence>
					</xs:choice>
					<xs:choice minOccurs="0" maxOccurs="1" i:view="list">
						<xs:sequence>
							<xs:element ref="i:title" minOccurs="1" maxOccurs="1" />
							<xs:element ref="i:confirm" minOccurs="0" maxOccurs="1" />
							<xs:element ref="i:params" minOccurs="0" maxOccurs="1" />
							<xs:element ref="i:proxy" minOccurs="1" maxOccurs="1" />
							<xs:element ref="i:datasource" minOccurs="0" maxOccurs="1" />
							<xs:element ref="i:display" minOccurs="1" maxOccurs="1" />
		        			<xs:element ref="i:fields" minOccurs="1" maxOccurs="1" />
							<xs:element ref="i:rowactions" minOccurs="0" maxOccurs="1" />
		        			<xs:element ref="i:actions" minOccurs="0" maxOccurs="1" />
		        			<xs:element ref="i:moreactions" minOccurs="0" maxOccurs="1" />
							<xs:element ref="i:cache" minOccurs="0" maxOccurs="1" />
							<xs:element ref="i:description" minOccurs="0" maxOccurs="1" />
							<xs:element ref="i:alternateDescriptions" minOccurs="0" maxOccurs="1" />
							<xs:element ref="i:grouping" minOccurs="0" maxOccurs="1" />
						</xs:sequence>
					</xs:choice>
				<xs:choice minOccurs="0" maxOccurs="1" i:view="show">
					<xs:sequence>
						<xs:element ref="i:title" minOccurs="1" maxOccurs="1" />
						<xs:element ref="i:confirm" minOccurs="0" maxOccurs="1" />
						<xs:element ref="i:datasource" minOccurs="0" maxOccurs="1" />
						<xs:element ref="i:display" minOccurs="1" maxOccurs="1" />
						<xs:element ref="i:fields" minOccurs="1" maxOccurs="1" />
	        			<xs:element ref="i:actions" minOccurs="0" maxOccurs="1" />
						<xs:element ref="i:cache" minOccurs="0" maxOccurs="1" />
						<xs:element ref="i:description" minOccurs="0" maxOccurs="1" />
						<xs:element ref="i:alternateDescriptions" minOccurs="0" maxOccurs="1" />
						<xs:element ref="i:grouping" minOccurs="0" maxOccurs="1" />
					</xs:sequence>
				</xs:choice>
				<xs:choice minOccurs="0" maxOccurs="1" i:view="wizard">
					<xs:sequence>
						<xs:element ref="i:title" minOccurs="1" maxOccurs="1" />
						<xs:element ref="i:confirm" minOccurs="0" maxOccurs="1" />
						<xs:element ref="i:datastore" minOccurs="0" maxOccurs="1" />
						<xs:element ref="i:area" minOccurs="1" maxOccurs="unbounded" />
						<xs:element ref="i:actions" minOccurs="0" maxOccurs="1" />
						<xs:element ref="i:grouping" minOccurs="0" maxOccurs="1" />
						<xs:element ref="i:widgetCategories" minOccurs="0" maxOccurs="1" />
						<xs:element ref="i:extrahelp" minOccurs="0" maxOccurs="1" />
					</xs:sequence>
				</xs:choice>
				<xs:choice minOccurs="0" maxOccurs="1" i:view="html">
					<xs:sequence>
						<xs:element ref="i:title" minOccurs="1" maxOccurs="1" />
						<xs:element ref="i:confirm" minOccurs="0" maxOccurs="1" />
						<xs:element ref="i:params" minOccurs="1" maxOccurs="1" />
						<xs:element ref="i:options" minOccurs="0" maxOccurs="1" />
						<xs:element ref="i:description" minOccurs="0" maxOccurs="1" />
						<xs:element ref="i:alternateDescriptions" minOccurs="0" maxOccurs="1" />
					</xs:sequence>
				</xs:choice>
				<xs:choice minOccurs="0" maxOccurs="1" i:view="info">
					<xs:sequence>
						<xs:element ref="i:title" minOccurs="1" maxOccurs="1" />
						<xs:element ref="i:confirm" minOccurs="0" maxOccurs="1" />
						<xs:element ref="i:body" minOccurs="1" maxOccurs="1" />
						<xs:element ref="i:actions" minOccurs="0" maxOccurs="1" />
						<xs:element ref="i:description" minOccurs="0" maxOccurs="1" />
						<xs:element ref="i:alternateDescriptions" minOccurs="0" maxOccurs="1" />
					</xs:sequence>
				</xs:choice>
    	</xs:choice>
        <xs:attribute name="type" type="i:viewType" use="required" />
        <xs:attribute name="tabbed" type="xs:boolean" use="optional" />
      </xs:complexType>
    </xs:element>
	
	<!-- This must be placed here to maintain proper parsing order. DO NOT Remove it! -->
	
	<xs:attributeGroup name="commonAttributes">
        <xs:annotation>
            <xs:documentation xml:lang="en">
               These are the attributes common to all directly parsable elements.          
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="priority" type="xs:integer" use="optional" default="0" />
        <xs:attribute name="id" type="xs:ID" use="optional" />
    </xs:attributeGroup>
	
</xs:schema>
